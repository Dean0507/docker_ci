sudo: required   #관리자 권한 갖기위해
#언어 플랫폼
language: generic
# 도커 환경에서 사용하겠다
services:
  - docker
#테스트를 하기전 해줘야 하는것들 - 도커파일이용해서 이미지 만들어준다음
before_install:
  - echo "start creating an image with dockerfile"
  - docker build -t deankim0507/reactapp -f Dockerfile.dev .
#실행할 스크립트(테스트 실행)
script: 
  - docker run -e CI=true deankim0507/reactapp npm run test -- --coverage
#CI= true -> Travis CI 사용한다 , --coverage - 상세한 내용출력
#성공한후 할 행동
after_success:
  - echo "Test Success"

deploy:
  edge: true
  provider: elasticbeanstalk    
  region: ca-central-1
  app: dean_portfolio
  env: DockerReactApp-env
  bucket_name: elasticbeanstalk-ca-central-1-522443927346
  bucket_path: dean_portfolio
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_ACCESS_KEY
# provider - 외부서비스 이름 표시(오타조심), region - 현재 사용하고있는 aws의 서비스가 위치하고있는 물리적장소
# env - 환경 이름 설정안하면 자동설정됨
# bucket_name: 버켓하나 자동으로 만들어짐, bucket_path: 어플리케이션 이름과 동일
# branch : 어떤 브랜치에 push 할때 aws에 배포할것인지
#AWS에서 IAM USER 만들어서 Elastic beanstalk 풀 권한 준다음 그 iam user의 accesskey 와 secretkey 받은후
#TRAVIS CI환경변수에서 ACCESS KEY 와 SECRET KEY를 등록하고